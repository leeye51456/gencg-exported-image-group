{"version":3,"sources":["openTga.js","App.js","index.js"],"names":["openTga","url","Promise","resolve","tga","TgaLoader","open","fileCompareFunction","a","b","name","App","setState","useState","completedCount","setCompletedCount","targetCount","setTargetCount","duration","setDuration","isProgressing","setIsProgressing","tgaFiles","setTgaFiles","pdfWidth","setPdfWidth","pdfHeight","setPdfHeight","pdfBackgroundColor","setPdfBackgroundColor","displayPageNumbers","setDisplayPageNumbers","filename","setFilename","convertImagesAndBuildPdfFile","begin","Date","getTime","completedCountLocal","length","all","map","file","reader","FileReader","onload","progressEvent","target","result","tgaCanvas","getCanvas","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","imageCompression","canvasToFile","png","maxWidthOrHeight","Math","max","compressedPng","getDataUrlFromFile","base64Png","initialQuality","fileType","compressedJpg","base64Jpg","pageNumber","Number","parseInt","replace","image","readAsDataURL","images","pdf","jsPDF","orientation","unit","format","deletePage","pdfShortSide","min","forEach","index","addPage","setFillColor","rect","addImage","setFont","setFontSize","setLineWidth","setDrawColor","setTextColor","text","String","align","baseline","renderingMode","save","handleBuildClick","handleInputChangeWith","event","value","handlePdfWidthChange","handlePdfHeightChange","handlePdfBackgroundColorChange","handleFilenameChange","handleDisplayPageNumbers","checked","className","onDragOver","preventDefault","onDrop","dataTransfer","items","droppedTgaFiles","reduce","acc","item","kind","getAsFile","test","type","endsWith","push","sort","accept","multiple","disabled","onChange","files","style","marginBottom","marginTop","onClick","floor","toFixed","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e7d1280f.chunk.js","sourcesContent":["import TgaLoader from 'tga-js';\n\nexport default function openTga(url) {\n  return new Promise((resolve) => {\n    const tga = new TgaLoader();\n    tga.open(url, () => {\n      resolve(tga);\n    });\n  });\n};\n","import { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\nimport { jsPDF } from 'jspdf';\n\nimport openTga from './openTga';\n\nimport './App.css';\n\nconst fileCompareFunction = (a, b) => a.name < b.name ? -1 : 1; // `a.name !== b.name` is always `true`\n\nfunction App() {\n  const [completedCount, setCompletedCount] = useState(0);\n  const [targetCount, setTargetCount] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isProgressing, setIsProgressing] = useState(false);\n  const [tgaFiles, setTgaFiles] = useState([]);\n  const [pdfWidth, setPdfWidth] = useState(960);\n  const [pdfHeight, setPdfHeight] = useState(540);\n  const [pdfBackgroundColor, setPdfBackgroundColor] = useState('#5e5e5e');\n  const [displayPageNumbers, setDisplayPageNumbers] = useState(true);\n  const [filename, setFilename] = useState('generated');\n\n  const convertImagesAndBuildPdfFile = async () => {\n    setIsProgressing(true);\n    const begin = new Date().getTime();\n\n    let completedCountLocal = 0;\n    setCompletedCount(0);\n    setTargetCount(tgaFiles.length + 1);\n\n    const images = await Promise.all(\n      tgaFiles.map(\n        async (file) => new Promise(\n          (resolve) => {\n            const reader = new FileReader();\n            reader.onload = async (progressEvent) => {\n              completedCountLocal += 0.34375; // -2, -4, -5; 0.01011\n              setCompletedCount(completedCountLocal);\n              setDuration(new Date().getTime() - begin);\n\n              const tga = await openTga(progressEvent.target.result);\n\n              completedCountLocal += 0.5625; // -1, -4; 0.1001\n              setCompletedCount(completedCountLocal);\n              setDuration(new Date().getTime() - begin);\n\n              const tgaCanvas = tga.getCanvas();\n              const canvas = document.createElement('canvas');\n              canvas.width = tgaCanvas.width;\n              canvas.height = tgaCanvas.height;\n\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = pdfBackgroundColor;\n              ctx.fillRect(-10, -10, canvas.width + 20, canvas.height + 20);\n              ctx.drawImage(tgaCanvas, 0, 0, canvas.width, canvas.height);\n\n              const png = await imageCompression.canvasToFile(canvas, 'image/png');\n              const compressedPng = await imageCompression(png, { maxWidthOrHeight: Math.max(pdfWidth, pdfHeight) });\n              const base64Png = await imageCompression.getDataUrlFromFile(compressedPng);\n\n              const compressedJpg = await imageCompression(\n                png,\n                { maxWidthOrHeight: Math.max(pdfWidth, pdfHeight), initialQuality: 0.9, fileType: 'image/jpeg' },\n              );\n              const base64Jpg = await imageCompression.getDataUrlFromFile(compressedJpg);\n\n              const pageNumber = Number.parseInt(file.name.replace(/^\\D*?(\\d+)\\.tga$/i, '$1'), 10);\n\n              completedCountLocal += 0.09375; // -4, -5; 0.00011\n              setCompletedCount(completedCountLocal);\n              setDuration(new Date().getTime() - begin);\n\n              if (base64Png.length - 22 <= (base64Jpg.length - 23) * 1.1) {\n                resolve({ pageNumber, image: base64Png });\n              } else {\n                resolve({ pageNumber, image: base64Jpg });\n              }\n            };\n            reader.readAsDataURL(file);\n          }\n        )\n      )\n    );\n\n    const pdf = new jsPDF({\n      orientation: pdfWidth >= pdfHeight ? 'landscape' : 'portrait',\n      unit: 'pt',\n      format: [pdfWidth, pdfHeight],\n    });\n    pdf.deletePage(1);\n\n    const pdfShortSide = Math.min(pdfWidth, pdfHeight);\n    images.forEach(\n      ({ pageNumber, image }, index) => {\n        pdf.addPage()\n          .setFillColor(pdfBackgroundColor)\n          .rect(-10, -10, pdfWidth + 20, pdfHeight + 20, 'F')\n          .addImage(image, 0, 0, pdfWidth, pdfHeight);\n        if (displayPageNumbers) {\n          pdf.setFont('Helvetica', '', 'Bold')\n            .setFontSize(pdfShortSide * 0.09375)\n            .setLineWidth(pdfShortSide * 0.015625)\n            .setDrawColor('#ffffff')\n            .setTextColor('#000000')\n            .text(\n              String(pageNumber || (index + 1)),\n              pdfWidth * 0.9375,\n              pdfHeight * 0.0625,\n              { align: 'right', baseline: 'top', renderingMode: 'stroke' },\n            )\n            .text(\n              String(pageNumber || (index + 1)),\n              pdfWidth * 0.9375,\n              pdfHeight * 0.0625,\n              { align: 'right', baseline: 'top', renderingMode: 'fill' },\n            );\n        }\n      }\n    );\n\n    pdf.save(`${filename}.pdf`);\n\n    completedCountLocal += 1;\n    setCompletedCount(completedCountLocal);\n    setDuration(new Date().getTime() - begin);\n    setIsProgressing(false);\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  }\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n\n    if (!event.dataTransfer.items) {\n      return;\n    }\n\n    const droppedTgaFiles = [...event.dataTransfer.items]\n      .reduce((acc, item) => {\n        if (item.kind !== 'file') {\n          return acc;\n        }\n\n        const file = item.getAsFile();\n        if (/image\\/targa/i.test(file.type) || file.name.endsWith('.tga')) {\n          acc.push(file);\n        }\n        return acc;\n      }, [])\n      .sort(fileCompareFunction);\n\n    if (droppedTgaFiles.length) {\n      setTgaFiles(droppedTgaFiles);\n    }\n  };\n\n  const handleFileChange = (event) => {\n    setTgaFiles([...event.target.files].sort(fileCompareFunction));\n  };\n\n  const handleBuildClick = async () => {\n    await convertImagesAndBuildPdfFile();\n  };\n\n  const handleInputChangeWith = (setState) => (event) => setState(event.target.value);\n  const handlePdfWidthChange = handleInputChangeWith(setPdfWidth);\n  const handlePdfHeightChange = handleInputChangeWith(setPdfHeight);\n  const handlePdfBackgroundColorChange = handleInputChangeWith(setPdfBackgroundColor);\n  const handleFilenameChange = handleInputChangeWith(setFilename);\n\n  const handleCheckboxChangeWith = (setState) => (event) => setState(event.target.checked);\n  const handleDisplayPageNumbers = handleCheckboxChangeWith(setDisplayPageNumbers)\n\n  return (\n    <div\n      className=\"App\"\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n    >\n      <h1>GenCG HD에서 추출한 이미지 PDF로 묶기</h1>\n\n      <h2>1. 이미지 파일 선택</h2>\n\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/x-targa,image/x-tga,.tga\"\n          multiple={true}\n          disabled={isProgressing}\n          onChange={handleFileChange}\n        />\n      </div>\n\n      <h3 style={{ marginBottom: '0.25rem' }}>\n        * 파일 {tgaFiles.length}개 선택됨\n      </h3>\n      <ol className=\"file-list\" style={{ marginTop: '0.25rem' }}>\n        {tgaFiles.map((file) => <li key={file.name}>{file.name}</li>)}\n      </ol>\n\n      <hr />\n\n      <h2>2. 출력 설정</h2>\n\n      <ul className=\"rows\">\n        <li>\n          <span className=\"col2\">파일명</span>\n          <span className=\"colgroup\">\n            <input\n              className=\"col2\"\n              type=\"text\"\n              value={filename}\n              onChange={handleFilenameChange}\n            />\n            <small>.pdf</small>\n          </span>\n        </li>\n\n        <li>\n          <span className=\"col2\">PDF 크기</span>\n          <span className=\"colgroup\">\n            <input\n              className=\"col2\"\n              type=\"number\"\n              value={pdfWidth}\n              onChange={handlePdfWidthChange}\n            />\n            <span className=\"gap\">x</span>\n            <input\n              className=\"col2\"\n              type=\"number\"\n              value={pdfHeight}\n              onChange={handlePdfHeightChange}\n            />\n          </span>\n        </li>\n\n        <li>\n          <span className=\"col2\">배경색</span>\n          <input\n            className=\"col2\"\n            type=\"color\"\n            value={pdfBackgroundColor}\n            onChange={handlePdfBackgroundColorChange}\n          />\n          <small className=\"col2\">{pdfBackgroundColor}</small>\n        </li>\n\n        <li>\n          <span className=\"col2\">페이지 번호 표시</span>\n          <label className=\"col4\">\n            <input\n              type=\"checkbox\"\n              checked={displayPageNumbers}\n              onChange={handleDisplayPageNumbers}\n            />\n          </label>\n        </li>\n      </ul>\n\n      <hr />\n\n      <h2>3. PDF 생성</h2>\n\n      <ul>\n        <li>\n          아직 메모리 최적화가 안 되어서 메모리를 많이 사용합니다.\n          PDF 생성 완료 후에는 쾌적한 기기 사용을 위해 탭을 닫는 것을 권장합니다.\n        </li>\n        <li>배터리를 사용하는 경우 배터리 소모가 많을 수 있습니다.</li>\n      </ul>\n\n      <ul className=\"rows\">\n        <li>\n          <button\n            className=\"col2\"\n            type=\"button\"\n            disabled={isProgressing || tgaFiles.length === 0}\n            onClick={handleBuildClick}\n          >\n            PDF 생성\n          </button>\n\n          {targetCount > 0 &&\n            <>\n              <progress\n                className=\"col2\"\n                value={completedCount}\n                max={targetCount}\n              >\n                {Math.floor(completedCount / targetCount * 100)}%\n              </progress>\n              <small className=\"col2\">\n                {(completedCount / targetCount * 100).toFixed(2)}%까지 {Math.floor(duration / 1000)}초 경과\n              </small>\n            </>}\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}