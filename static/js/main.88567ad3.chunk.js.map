{"version":3,"sources":["loadTga.js","readAndConvertImage.js","buildAndDownloadPdf.js","App.js","index.js"],"names":["loadTga","uint8Array","tga","TgaLoader","load","getImageData","file","options","a","dotIndex","name","lastIndexOf","parseInt","substring","getCompressedFromTga","pageNumber","imageData","getImageDataFromTga","then","getCanvasFromImageData","canvas","getPngOrJpgFromCanvas","Promise","resolve","reader","FileReader","onload","progressEvent","Uint8Array","target","result","readAsArrayBuffer","document","createElement","width","height","ctx","getContext","fillStyle","backgroundColor","fillRect","putImageData","imageCompression","canvasToFile","png","maxWidthOrHeight","Math","max","compressedPng","arrayBuffer","pngImageData","initialQuality","fileType","compressedJpg","jpgImageData","length","readAndConvertImage","files","setupOptions","pdf","jsPDF","orientation","unit","format","deletePage","pdfShortSide","min","index","addPage","setFillColor","rect","addImage","displayPageNumbers","setFont","setFontSize","setLineWidth","setDrawColor","setTextColor","text","String","align","baseline","renderingMode","updateProgressState","task","progress","save","filename","Infinity","floor","buildAndDownloadPdf","fileCompareFunction","b","App","setState","useState","setTask","progressRatio","setProgressRatio","startTime","setStartTime","now","setNow","isProgressing","setIsProgressing","tgaFiles","setTgaFiles","pdfWidth","setPdfWidth","pdfHeight","setPdfHeight","pdfBackgroundColor","setPdfBackgroundColor","setDisplayPageNumbers","setFilename","Date","getTime","convertImagesAndBuildPdfFile","handleBuildClick","handleInputChangeWith","event","value","handlePdfWidthChange","handlePdfHeightChange","handlePdfBackgroundColorChange","handleFilenameChange","handleDisplayPageNumbers","checked","className","onDragOver","preventDefault","onDrop","dataTransfer","items","droppedTgaFiles","reduce","acc","item","kind","getAsFile","test","type","endsWith","push","sort","accept","multiple","disabled","onChange","style","marginBottom","marginTop","map","onClick","toFixed","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.88567ad3.chunk.js","sourcesContent":["import TgaLoader from 'tga-js';\n\nexport default function loadTga(uint8Array) {\n  const tga = new TgaLoader();\n  tga.load(uint8Array);\n  return tga.getImageData();\n};\n","import imageCompression from 'browser-image-compression';\n\nimport loadTga from './loadTga';\n\nasync function readAndConvertImage(file, options) {\n  const dotIndex = file.name.lastIndexOf('.');\n  return {\n    pageNumber: parseInt(file.name.substring(dotIndex - 5), 10),\n    imageData: await getCompressedFromTga(file, options),\n  };\n}\n\nasync function getCompressedFromTga(file, options) {\n  return getImageDataFromTga(file)\n    .then((imageData) => getCanvasFromImageData(imageData, options))\n    .then((canvas) => getPngOrJpgFromCanvas(canvas, options));\n}\n\nasync function getImageDataFromTga(file) {\n  return await new Promise((resolve) => {\n    const reader = new FileReader();\n\n    reader.onload = async (progressEvent) => {\n      resolve(await loadTga(new Uint8Array(progressEvent.target.result)));\n    };\n\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction getCanvasFromImageData(imageData, options) {\n  const canvas = document.createElement('canvas');\n  canvas.width = imageData.width;\n  canvas.height = imageData.height;\n\n  const ctx = canvas.getContext('2d');\n  ctx.fillStyle = options.backgroundColor;\n  ctx.fillRect(-10, -10, imageData.width + 20, imageData.height + 20);\n  ctx.putImageData(imageData, 0, 0);\n\n  return canvas;\n}\n\nasync function getPngOrJpgFromCanvas(canvas, options) {\n  const png = await imageCompression.canvasToFile(canvas, 'image/png');\n\n  const compressedPng = await imageCompression(png, { maxWidthOrHeight: Math.max(options.width, options.height) });\n  const pngImageData = new Uint8Array(await compressedPng.arrayBuffer());\n\n  const compressedJpg = await imageCompression(\n    png,\n    {\n      maxWidthOrHeight: Math.max(options.width, options.height),\n      initialQuality: 0.9,\n      fileType: 'image/jpeg',\n    },\n  );\n  const jpgImageData = new Uint8Array(await compressedJpg.arrayBuffer());\n\n  if (pngImageData.length <= jpgImageData.length * 1.1) {\n    return pngImageData;\n  } else {\n    return jpgImageData;\n  }\n}\n\nexport default readAndConvertImage;\n","import jsPDF from 'jspdf';\n\nimport readAndConvertImage from './readAndConvertImage';\n\nasync function buildAndDownloadPdf(files, options) {\n  options = setupOptions(options);\n\n  const pdf = new jsPDF({\n    orientation: options.width >= options.height ? 'landscape' : 'portrait',\n    unit: 'pt',\n    format: [options.width, options.height],\n  });\n  pdf.deletePage(1);\n\n  const pdfShortSide = Math.min(options.width, options.height);\n  const length = files.length;\n\n  for (let index = 0; index < length; index += 1) {\n    const { pageNumber, imageData } = await readAndConvertImage(files[index], options);\n\n    pdf.addPage()\n      .setFillColor(options.backgroundColor)\n      .rect(-10, -10, options.width + 20, options.height + 20, 'F')\n      .addImage(imageData, 0, 0, options.width, options.height);\n\n    if (options.displayPageNumbers) {\n      pdf.setFont('Helvetica', '', 'Bold')\n        .setFontSize(pdfShortSide * 0.09375)\n        .setLineWidth(pdfShortSide * 0.015625)\n        .setDrawColor('#ffffff')\n        .setTextColor('#000000')\n        .text(\n          String(pageNumber || (index + 1)),\n          options.width * 0.9375,\n          options.height * 0.0625,\n          { align: 'right', baseline: 'top', renderingMode: 'stroke' },\n        )\n        .text(\n          String(pageNumber || (index + 1)),\n          options.width * 0.9375,\n          options.height * 0.0625,\n          { align: 'right', baseline: 'top', renderingMode: 'fill' },\n        );\n    }\n\n    options.updateProgressState({ task: '이미지 변환 및 PDF 페이지 생성', progress: (index + 1) / length });\n  }\n\n  pdf.save(`${options.filename}.pdf`);\n}\n\nfunction setupOptions(options) {\n  const result = {};\n\n  result.updateProgressState = typeof options.updateProgressState === 'function'\n    ? options.updateProgressState\n    : () => {};\n  result.displayPageNumbers = typeof options.displayPageNumbers === 'boolean' ? options.displayPageNumbers : false;\n  result.filename = typeof options.filename === 'string' ? options.filename : 'generated';\n  result.backgroundColor = typeof options.backgroundColor === 'string' ? options.backgroundColor : '#5e5e5e';\n  result.width = options.width > 0 && options.width !== Infinity ? Math.floor(options.width) : 960;\n  result.height = options.height > 0 && options.height !== Infinity ? Math.floor(options.height) : 540;\n\n  return result;\n}\n\nexport default buildAndDownloadPdf;\n","import { useState } from 'react';\n\nimport buildAndDownloadPdf from './buildAndDownloadPdf';\nimport './App.css';\n\nconst fileCompareFunction = (a, b) => a.name < b.name ? -1 : 1; // `a.name !== b.name` is always `true`\n\nfunction App() {\n  const [task, setTask] = useState('');\n  const [progressRatio, setProgressRatio] = useState(0);\n  const [startTime, setStartTime] = useState(0);\n  const [now, setNow] = useState(0);\n  const [isProgressing, setIsProgressing] = useState(false);\n  const [tgaFiles, setTgaFiles] = useState([]);\n  const [pdfWidth, setPdfWidth] = useState(960);\n  const [pdfHeight, setPdfHeight] = useState(540);\n  const [pdfBackgroundColor, setPdfBackgroundColor] = useState('#5e5e5e');\n  const [displayPageNumbers, setDisplayPageNumbers] = useState(true);\n  const [filename, setFilename] = useState('generated');\n\n  const updateProgressState = ({ task, progress }) => {\n    if (typeof task === 'string') {\n      setTask(task);\n    }\n\n    setProgressRatio(progress);\n    setNow(new Date().getTime());\n  };\n\n  const convertImagesAndBuildPdfFile = async () => {\n    setIsProgressing(true);\n    setStartTime(new Date().getTime());\n\n    updateProgressState('작업 시작', 0);\n\n    buildAndDownloadPdf(tgaFiles, {\n      updateProgressState,\n      displayPageNumbers,\n      filename,\n      width: pdfWidth,\n      height: pdfHeight,\n      backgroundColor: pdfBackgroundColor,\n    });\n\n    setIsProgressing(false);\n  };\n\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n\n  const handleDrop = (event) => {\n    event.preventDefault();\n\n    if (!event.dataTransfer.items) {\n      return;\n    }\n\n    const droppedTgaFiles = [...event.dataTransfer.items]\n      .reduce((acc, item) => {\n        if (item.kind !== 'file') {\n          return acc;\n        }\n\n        const file = item.getAsFile();\n        if (/image\\/targa/i.test(file.type) || file.name.endsWith('.tga')) {\n          acc.push(file);\n        }\n        return acc;\n      }, [])\n      .sort(fileCompareFunction);\n\n    if (droppedTgaFiles.length) {\n      setTgaFiles(droppedTgaFiles);\n    }\n  };\n\n  const handleFileChange = (event) => {\n    setTgaFiles([...event.target.files].sort(fileCompareFunction));\n  };\n\n  const handleBuildClick = async () => {\n    await convertImagesAndBuildPdfFile();\n  };\n\n  const handleInputChangeWith = (setState) => (event) => setState(event.target.value);\n  const handlePdfWidthChange = handleInputChangeWith(setPdfWidth);\n  const handlePdfHeightChange = handleInputChangeWith(setPdfHeight);\n  const handlePdfBackgroundColorChange = handleInputChangeWith(setPdfBackgroundColor);\n  const handleFilenameChange = handleInputChangeWith(setFilename);\n\n  const handleCheckboxChangeWith = (setState) => (event) => setState(event.target.checked);\n  const handleDisplayPageNumbers = handleCheckboxChangeWith(setDisplayPageNumbers)\n\n  return (\n    <div\n      className=\"App\"\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n    >\n      <h1>GenCG HD에서 추출한 이미지 PDF로 묶기</h1>\n\n      <h2>1. 이미지 파일 선택</h2>\n\n      <div>\n        <input\n          type=\"file\"\n          accept=\"image/x-targa,image/x-tga,.tga\"\n          multiple={true}\n          disabled={isProgressing}\n          onChange={handleFileChange}\n        />\n      </div>\n\n      <h3 style={{ marginBottom: '0.25rem' }}>\n        * 파일 {tgaFiles.length}개 선택됨\n      </h3>\n      <ol className=\"file-list\" style={{ marginTop: '0.25rem' }}>\n        {tgaFiles.map((file) => <li key={file.name}>{file.name}</li>)}\n      </ol>\n\n      <hr />\n\n      <h2>2. 출력 설정</h2>\n\n      <ul className=\"rows\">\n        <li>\n          <span className=\"col2\">파일명</span>\n          <span className=\"colgroup\">\n            <input\n              className=\"col2\"\n              type=\"text\"\n              value={filename}\n              onChange={handleFilenameChange}\n            />\n            <small>.pdf</small>\n          </span>\n        </li>\n\n        <li>\n          <span className=\"col2\">PDF 크기</span>\n          <span className=\"colgroup\">\n            <input\n              className=\"col2\"\n              type=\"number\"\n              value={pdfWidth}\n              onChange={handlePdfWidthChange}\n            />\n            <span className=\"gap\">x</span>\n            <input\n              className=\"col2\"\n              type=\"number\"\n              value={pdfHeight}\n              onChange={handlePdfHeightChange}\n            />\n          </span>\n        </li>\n\n        <li>\n          <span className=\"col2\">배경색</span>\n          <input\n            className=\"col2\"\n            type=\"color\"\n            value={pdfBackgroundColor}\n            onChange={handlePdfBackgroundColorChange}\n          />\n          <small className=\"col2\">{pdfBackgroundColor}</small>\n        </li>\n\n        <li>\n          <span className=\"col2\">페이지 번호 표시</span>\n          <label className=\"col4\">\n            <input\n              type=\"checkbox\"\n              checked={displayPageNumbers}\n              onChange={handleDisplayPageNumbers}\n            />\n          </label>\n        </li>\n      </ul>\n\n      <hr />\n\n      <h2>3. PDF 생성</h2>\n\n      <ul>\n        <li>\n          아직 메모리 최적화가 안 되어서 메모리를 많이 사용합니다.\n          PDF 생성 완료 후에는 쾌적한 기기 사용을 위해 탭을 닫는 것을 권장합니다.\n        </li>\n        <li>배터리를 사용하는 경우 배터리 소모가 많을 수 있습니다.</li>\n      </ul>\n\n      <ul className=\"rows\">\n        <li>\n          <button\n            className=\"col2\"\n            type=\"button\"\n            disabled={isProgressing || tgaFiles.length === 0}\n            onClick={handleBuildClick}\n          >\n            PDF 생성\n          </button>\n\n          {task !== '' &&\n            <>\n              <progress\n                className=\"col2\"\n                value={progressRatio}\n                max={1}\n              >\n                {Math.floor(progressRatio * 100)}%\n              </progress>\n              <small className=\"col2\">\n                {(progressRatio * 100).toFixed(2)}%까지 {((now - startTime) / 1000).toFixed(1)}초 경과\n              </small>\n            </>}\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}