{"version":3,"sources":["openTga.js","App.js","index.js"],"names":["openTga","url","Promise","resolve","tga","TgaLoader","open","App","setState","useState","completedCount","setCompletedCount","targetCount","setTargetCount","duration","setDuration","isProgressing","setIsProgressing","tgaFiles","setTgaFiles","pdfWidth","setPdfWidth","pdfHeight","setPdfHeight","pdfBackgroundColor","setPdfBackgroundColor","displayPageNumbers","setDisplayPageNumbers","handleFileChange","event","a","target","files","handleBuildClick","begin","Date","getTime","completedCountLocal","length","all","map","file","reader","FileReader","onload","progressEvent","result","tgaCanvas","getCanvas","canvas","document","createElement","width","height","ctx","getContext","fillStyle","fillRect","drawImage","imageCompression","canvasToFile","png","maxWidthOrHeight","Math","max","compressedPng","getDataUrlFromFile","base64Png","jpg","initialQuality","compressedJpg","base64Jpg","readAsDataURL","images","pdf","jsPDF","orientation","unit","format","deletePage","pdfShortSide","min","forEach","image","index","addPage","setFillColor","rect","addImage","setFont","setFontSize","setLineWidth","setDrawColor","setTextColor","text","String","align","baseline","renderingMode","save","handleInputChangeWith","value","handlePdfWidthChange","handlePdfHeightChange","handlePdfBackgroundColorChange","handleDisplayPageNumbers","checked","type","accept","multiple","disabled","onChange","onClick","floor","toFixed","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.53da130d.chunk.js","sourcesContent":["import TgaLoader from 'tga-js';\n\nexport default function openTga(url) {\n  return new Promise((resolve) => {\n    const tga = new TgaLoader();\n    tga.open(url, () => {\n      resolve(tga);\n    });\n  });\n};\n","import { useState } from 'react';\nimport imageCompression from 'browser-image-compression';\nimport { jsPDF } from 'jspdf';\n\nimport openTga from './openTga';\n\nfunction App() {\n  const [completedCount, setCompletedCount] = useState(0);\n  const [targetCount, setTargetCount] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isProgressing, setIsProgressing] = useState(false);\n  const [tgaFiles, setTgaFiles] = useState([]);\n  const [pdfWidth, setPdfWidth] = useState(960);\n  const [pdfHeight, setPdfHeight] = useState(540);\n  const [pdfBackgroundColor, setPdfBackgroundColor] = useState('#5e5e5e');\n  const [displayPageNumbers, setDisplayPageNumbers] = useState(true);\n\n  const handleFileChange = async (event) => {\n    setTgaFiles([...event.target.files]);\n  };\n\n  const handleBuildClick = async () => {\n    setIsProgressing(true);\n    const begin = new Date().getTime();\n\n    let completedCountLocal = 0;\n    setCompletedCount(0);\n    setTargetCount(tgaFiles.length + 1);\n\n    const images = await Promise.all(\n      tgaFiles.map(\n        async (file) => new Promise(\n          (resolve) => {\n            const reader = new FileReader();\n            reader.onload = async (progressEvent) => {\n              completedCountLocal += 0.34375; // -2, -4, -5; 0.01011\n              setCompletedCount(completedCountLocal);\n              setDuration(new Date().getTime() - begin);\n\n              const tga = await openTga(progressEvent.target.result);\n\n              completedCountLocal += 0.5625; // -1, -4; 0.1001\n              setCompletedCount(completedCountLocal);\n              setDuration(new Date().getTime() - begin);\n\n              const tgaCanvas = tga.getCanvas();\n              const canvas = document.createElement('canvas');\n              canvas.width = tgaCanvas.width;\n              canvas.height = tgaCanvas.height;\n\n              const ctx = canvas.getContext('2d');\n              ctx.fillStyle = pdfBackgroundColor;\n              ctx.fillRect(-10, -10, canvas.width + 20, canvas.height + 20);\n              ctx.drawImage(tgaCanvas, 0, 0, canvas.width, canvas.height);\n\n              const png = await imageCompression.canvasToFile(canvas, 'image/png');\n              const compressedPng = await imageCompression(png, { maxWidthOrHeight: Math.max(pdfWidth, pdfHeight) });\n              const base64Png = await imageCompression.getDataUrlFromFile(compressedPng);\n\n              const jpg = await imageCompression.canvasToFile(canvas, 'image/jpeg');\n              const compressedJpg = await imageCompression(jpg, { maxWidthOrHeight: Math.max(pdfWidth, pdfHeight), initialQuality: 0.9 });\n              const base64Jpg = await imageCompression.getDataUrlFromFile(compressedJpg);\n\n              completedCountLocal += 0.09375; // -4, -5; 0.00011\n              setCompletedCount(completedCountLocal);\n              setDuration(new Date().getTime() - begin);\n\n              if (base64Png.length - 22 <= (base64Jpg.length - 23) * 1.1) {\n                resolve(base64Png);\n              } else {\n                resolve(base64Jpg);\n              }\n            };\n            reader.readAsDataURL(file);\n          }\n        )\n      )\n    );\n\n    const pdf = new jsPDF({\n      orientation: pdfWidth >= pdfHeight ? 'landscape' : 'portrait',\n      unit: 'pt',\n      format: [pdfWidth, pdfHeight],\n    });\n    pdf.deletePage(1);\n\n    const pdfShortSide = Math.min(pdfWidth, pdfHeight);\n    images.forEach(\n      (image, index) => {\n        pdf.addPage()\n          .setFillColor(pdfBackgroundColor)\n          .rect(-10, -10, pdfWidth + 20, pdfHeight + 20, 'F')\n          .addImage(image, 0, 0, pdfWidth, pdfHeight);\n        if (displayPageNumbers) {\n          pdf.setFont('Helvetica', '', 'Bold')\n            .setFontSize(pdfShortSide * 0.09375)\n            .setLineWidth(pdfShortSide * 0.015625)\n            .setDrawColor('#ffffff')\n            .setTextColor('#000000')\n            .text(String(index + 1), pdfWidth * 0.9375, pdfHeight * 0.0625, { align: 'right', baseline: 'top', renderingMode: 'stroke' })\n            .text(String(index + 1), pdfWidth * 0.9375, pdfHeight * 0.0625, { align: 'right', baseline: 'top', renderingMode: 'fill' });\n        }\n      }\n    );\n\n    pdf.save();\n\n    completedCountLocal += 1;\n    setCompletedCount(completedCountLocal);\n    setDuration(new Date().getTime() - begin);\n    setIsProgressing(false);\n  };\n\n  const handleInputChangeWith = (setState) => (event) => setState(event.target.value);\n  const handlePdfWidthChange = handleInputChangeWith(setPdfWidth);\n  const handlePdfHeightChange = handleInputChangeWith(setPdfHeight);\n  const handlePdfBackgroundColorChange = handleInputChangeWith(setPdfBackgroundColor);\n\n  const handleCheckboxChangeWith = (setState) => (event) => setState(event.target.checked);\n  const handleDisplayPageNumbers = handleCheckboxChangeWith(setDisplayPageNumbers)\n\n  return (\n    <div>\n      <h1>GenCG HD에서 추출한 이미지 PDF로 묶기</h1>\n\n      <h2>1. 이미지 파일 선택</h2>\n      <input\n        type=\"file\"\n        accept=\"image/x-targa,image/x-tga\"\n        multiple={true}\n        disabled={isProgressing}\n        onChange={handleFileChange}\n      />\n      <ul>\n        <li>Windows에서는 마지막 파일을 먼저 선택한 뒤, Shift 키를 누른 채로 첫 파일을 클릭합니다.</li>\n        <li>MacOS에서는 첫 파일을 먼저 선택한 뒤, Shift 키를 누른 채로 마지막 파일을 선택합니다.</li>\n        <li>또는 전체 선택(Ctrl+A / {'\\u2318'}A)로 현재 폴더의 모든 파일을 선택합니다.</li>\n      </ul>\n\n      <hr />\n\n      <h2>2. 출력 설정</h2>\n      <ul>\n        <li>\n          PDF 크기:{' '}\n          <input\n            type=\"number\"\n            value={pdfWidth}\n            onChange={handlePdfWidthChange}\n          />\n          {' x '}\n          <input\n            type=\"number\"\n            value={pdfHeight}\n            onChange={handlePdfHeightChange}\n          />\n        </li>\n        <li>\n          배경색:{' '}\n          <input\n            type=\"color\"\n            value={pdfBackgroundColor}\n            onChange={handlePdfBackgroundColorChange}\n          />\n          {' ' + pdfBackgroundColor}\n        </li>\n        <li>페이지 번호 표시: <input type=\"checkbox\" checked={displayPageNumbers} onChange={handleDisplayPageNumbers} /></li>\n      </ul>\n\n      <hr />\n\n      <h2>3. PDF 생성</h2>\n      <ul>\n        <li>아직 메모리 최적화가 안 되어서 메모리를 많이 사용합니다. PDF 생성 완료 후에는 쾌적한 기기 사용을 위해 탭을 닫는 것을 권장합니다.</li>\n        <li>배터리를 사용하는 경우 배터리 소모가 많을 수 있습니다.</li>\n      </ul>\n      <p>\n        <button\n          type=\"button\"\n          disabled={isProgressing || tgaFiles.length === 0}\n          onClick={handleBuildClick}\n        >\n          PDF 생성\n        </button>\n        {' '}\n        {targetCount > 0 &&\n          <>\n            <progress value={completedCount} max={targetCount}>\n              {Math.floor(completedCount / targetCount * 100)}%\n            </progress>\n            {' '}\n            {(completedCount / targetCount * 100).toFixed(2)}%\n            {' '}\n            ({Math.floor(duration / 1000)}초 경과)\n          </>}\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}